<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《软件工程师的核心能力：高效学习》</title>
      <link href="/2024/05/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B%EF%BC%9A%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/05/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B%EF%BC%9A%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="端正学习态度"><a href="#端正学习态度" class="headerlink" title="端正学习态度"></a>端正学习态度</h1><p>学习是不可能速成的。这里只有一些方法和技巧，是我这么多年来行之有效的，分享出来也许对你有帮助。<strong>一方面，可能会让你学得更多和更累，另一方面，可能会让你学得更系统、更全面。总之，学习是一件“逆人性”的事，就像锻炼身体一样，需要人持续付出，会让人感到痛苦，并随时想找理由放弃。</strong></p><p>大部分人都认为自己爱学习，但是：他们都是只有意识没有行动，他们是动力不足的人。他们都不知道自己该学什么，他们缺乏方向和目标。他们都不具备自主学习的能力，没有正确的方法和技能。更要命的是，他们缺乏实践和坚持。如果你去研究一下古今中外的成功人士，就会发现，他们基本上都是非常自律的，也都是非常热爱学习的。他们可以沉得下心来不断地学习，在学习中不断地思考、探索和实践。所以，如果你不能克服自己 DNA 中的弱点，不能端正自己的态度，不能自律，不能坚持，不能举一反三，不能不断追问等，那么，无论有多好的方法，你都不可能学好。所以，有正确的态度很重要。</p><h2 id="主动学习和被动学习"><a href="#主动学习和被动学习" class="headerlink" title="主动学习和被动学习"></a>主动学习和被动学习</h2><p>1946 年，美国学者埃德加·戴尔（Edgar Dale）提出了「学习金字塔」（Cone of Learning）的理论。之后，美国缅因州国家训练实验室也做了相同的实验，并发布了「学习金字塔」报告。</p><p><img src="/img/1714915535870.png" alt="img"></p><p>人的学习分为「被动学习」和「主动学习」两个层次。被动学习：如听讲、阅读、视听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。这个模型很好地展示了不同学习深度和层次之间的对比。我们可以看到，你听别人讲，或是自己看书，或是让别人演示给你，这些都不能让你真正获得学习能力，因为你是在被别人灌输，在听别人说。只有你开始自己思考，开始自己总结和归纳，开始找人交流讨论，开始践行，并开始对外输出，你才会掌握到真正的学习能力。举个大家都懂的例子，那就是学习英文，我们从小就是在开始学习英文了，很多人英文成绩可以考得很好，语法也可以不错。然而，哪天真正要和外国人交流的时候，却发现自己的英文能力渣得不要不要的，只会回答：Fine. Thank you, and you? 这就是浅度学习的结果。学习不是努力读更多的书，盲目追求阅读的速度和数量，这会让人产生低层次的勤奋和成长的感觉，这只是在使蛮力。要思辨，要践行，要总结和归纳，否则，你只是在机械地重复某件事，而不会有质的成长的。</p><h2 id="浅度学习和深度学习"><a href="#浅度学习和深度学习" class="headerlink" title="浅度学习和深度学习"></a>浅度学习和深度学习</h2><p>老实说，对于当前这个社会：大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。所以，你看，在这种环境下，你根本不需要努力的。你只需要踏实一点，像以前那样看书，看英文资料，你只需要正常学习，根本不用努力，就可以超过你身边的绝大多数人。我们整个世界进入了前所未有的信息爆炸时代，人们担忧的不再是无知识可学，而是有学不完的知识。而且时代的节奏变得越来越快，你可能再也不像 20 年前，可以沉着优雅平和地泡上一杯茶，坐在一个远离喧嚣的环境下，认认真真地看本书。这个时代，你再也不会有大块大块的时间，你的时间都被打成碎片了，不知不觉你也成为了快餐文化的拥趸……在这样一个时代下，种种迹象表明，快速、简单、轻松的方式给人带来的快感更强烈，而高层次的思考、思辨和逻辑则被这些频度高的快餐信息感所弱化。于是，商家们看到了其中的商机，看到了如何在这样的时代里怎么治愈这些人在学习上的焦虑，他们在想方设法地用一些手段推出各种代读、领读和听读类产品，让人们可以在短时间内体会到轻松获取知识的快感，并产生勤奋好学和成长的幻觉。</p><p>这些所谓的“快餐文化”可以让你有短暂的满足感，但是无法让你有更深层次的思考和把知识转换成自己的技能的有效路径，因为那些都是需要大量时间和精力的付出，不符合现代人的生活节奏。人们开始在朋友圈、公众号、得到等这样的地方进行学习，导致他们越学越焦虑，越学越浮燥，越学越不会思考。于是，他们成了“什么都懂，但依然过不好这一生”的状态。只要你注意观察，就会发现，少数的精英人士，他们在训练自己获取知识的能力，他们到源头查看第一手的资料，然后，深度钻研，并通过自己的思考后，生产更好的内容。而绝大部分受众享受轻度学习，消费内容。你有没有发现，在知识的领域也有阶层之分，那些长期在底层知识阶层的人，需要等着高层的人来喂养，他们长期陷于各种谣言和不准确的信息环境中，于是就导致错误或幼稚的认知，并习惯于那些不费劲儿的轻度学习方式，从而一点点地丧失了深度学习的独立思考能力，从而再也没有能力打破知识阶层的限制，被困在认知底层翻不了身。</p><p>可见深度学习十分重要，但应该怎样进行深度学习呢？下面几点是关键。高质量的信息源和第一手的知识。把知识连成地图，将自己的理解反述出来。不断地反思和思辨，与不同年龄段的人讨论。举一反三，并践行之，把知识转换成技能。换言之，学习有三个步骤。知识采集。信息源是非常重要的，获取信息源头、破解表面信息的内在本质、多方数据印证，是这个步骤的关键。知识缝合。所谓缝合就是把信息组织起来，成为结构体的知识。这里，连接记忆，逻辑推理，知识梳理是很重要的三部分。技能转换。通过举一反三、实践和练习，以及传授教导，把知识转化成自己的技能。这种技能可以让你进入更高的阶层。我觉得这是任何人都是可以做到的，就是看你想不想做了。此外，在正式开始讲如何学习之前，让我先说一些关于学习的观点，这是在为后面的那些学习方法和技巧做提纲挈领的铺垫。</p><h2 id="学习是为了找到方法、找到原理、了解自己和改变自己"><a href="#学习是为了找到方法、找到原理、了解自己和改变自己" class="headerlink" title="学习是为了找到方法、找到原理、了解自己和改变自己"></a>学习是为了找到方法、找到原理、了解自己和改变自己</h2><p>学习是为了找到方法。学习不仅仅是为了找到答案，而更是为了找到方法。很多时候，尤其是中国的学生，他们在整个学生时代都喜欢死记硬背，因为他们只有一个 KPI，那就是在考试中取得好成绩，所以，死记硬背或题海战术成了他们的学习习惯。然而，在知识的海洋中，答案太多了，你是记不住那么多答案的。只有掌握解题的思路和方法，你才算得上拥有解决问题的能力。所有的练习，所有的答案，其实都是在引导你去寻找一种“以不变应万变”的方法或能力。在这种能力下，你不需要知道答案，因为你可以用这种方法很快找到答案，找到解，甚至可以通过这样的方式找到最优解或最优雅的答案。这就好像，你要去登一座山，一种方法是通过别人修好的路爬上去，一种是通过自己的技能找到路（或是自己修一条路）爬上去。也就是说，需要有路才爬得上山的人，和没有路能造路的人相比，后者的能力就会比前者大得多得多。所以，学习是为了找到通往答案的路径和方法，是为了拥有无师自通的能力。</p><p>学习是为了找到原理。学习不仅仅是为了知道，而更是为了思考和理解。在学习的过程中，我们不是为了知道某个事的表面是什么，而是要通过表象去探索其内在的本质和原理。真正的学习，从来都不是很轻松的，而是那种你知道得越多，你的问题就会越多，你的问题越多，你就会思考得越多，你思考得越多，你就会越觉得自己知道得越少，于是你就会想要了解更多。如此循环，是这么一种螺旋上升上下求索的状态。但是，这种循环，会在你理解了某个关键知识点后一下子把所有的知识全部融会贯通，让你赫然开朗，此时的那种感觉是非常美妙而难以言语的。在学习的过程中，我们要不断地问自己，这个技术出现的初衷是什么？是要解决什么样的问题？为什么那个问题要用这种方法解？为什么不能用别的方法解？为什么不能简单一些？……这些问题都会驱使你像一个侦探一样去探索背后的事实和真相，并在不断的思考中一点一点地理解整个事情的内在本质、逻辑和原理。一旦理解和掌握了这些本质的东西，你就会发现，整个复杂多变的世界在变得越来越简单。你就好像找到了所有问题的最终答案似的，一通百通了。</p><p>学习是为了了解自己。学习不仅仅是为了开拓眼界，而更是为了找到自己的未知，为了了解自己。英文中有句话叫：You do not know what you do not know，可以翻译为：你不知道你不知道的东西。也就是说，你永远不会去学习你不知道其存在的东西。就好像你永远 Google 不出来你不知道的事，因为对于你不知道的事，你不知道用什么样的关键词，你不知道关键词，你就找不到你想要的知识。这个世界上有很多东西是你不知道的，所以，学习可以让你知道自己不知道的东西。只有当我们知道有自己不知道的东西，我们才会知道我们要学什么。所以，我们要多走出去，与不同的人交流，与比自己聪明的人共事，你才会知道自己的短板和缺失，才会反过来审视和分析自己，从而明白如何提升自己。山外有山，楼外有楼，人活着最怕的就是坐井观天，自以为是。因为这样一来，你的大脑会封闭起来，你会开始不接受新的东西，你的发展也就到了天花板。开拓眼界的目的就是发现自己的不足和上升空间，从而才能让自己成长。</p><p>学习是为了改变自己。学习不仅仅是为了成长，而更是为了改变自己。很多时候，我们觉得学习是为了自己的成长，但是其实，学习是为了改变自己，然后才能获得成长。为什么这么说呢？我们知道，人都是有直觉的，但如果人的直觉真的靠谱，那么我们就不需要学习了。而学习就是为了告诉我们，我们的很多直觉或是思维方式是不对的，不好的，不科学的。只有做出了改变后，我们才能够获得更好的成长。你可以回顾一下自己的成长经历，哪一次你有质的成长时，不是因为你突然间开窍了，开始用一种更有效率、更科学、更系统的方式做事，然后让你达到了更高的地方。不是吗？当你学习了乘法以后，在很多场景下，就不需要用加法来统计了，你可以使用乘法来数数，效率提升百倍。当你有一天知道了逻辑中的充要条件或是因果关系后，你会发现使用这样的方式来思考问题时，你比以往更接近问题的真相。学习是为了改变自己的思考方式，改变自己的思维方式，改变自己与生俱来的那些垃圾和低效的算法。总之，学习让我们改变自己，行动和践行，反思和改善，从而获得成长。</p><h1 id="源头、原理和知识地图"><a href="#源头、原理和知识地图" class="headerlink" title="源头、原理和知识地图"></a>源头、原理和知识地图</h1><h2 id="挑选知识和信息源"><a href="#挑选知识和信息源" class="headerlink" title="挑选知识和信息源"></a>挑选知识和信息源</h2><p>英文对于我们来说至关重要，尤其是对于计算机知识来说。如果你觉得用百度搜中文关键词就可以找到自己想要的知识，那么你一定远远落后于这个时代了。如果你用 Google 英文关键词可以找到自己想要的知识，那么你算是能跟得上这个时代。如果你能在社区里跟社区里的大牛交流得到答案，那么你算是领先于这个时代了。所以，我认为你的信息源要有下面几个特质。应该是第一手资料，不是被别人理解过、消化过的二手资料。尤其对于知识性的东西来说，更是这样。应该是原汁原味的，不应该是被添油加醋的。应该是有佐证、有数据、有引用的，或是有权威人士或大公司生产系统背书的资料。应该是被时间和实践检验过的，或是小心求证过的，不是拍脑袋野路子或是道听途说出来的资料。应该是加入了一些自己的经验和思考，可以引发人深思的，是所谓信息的密集很大的文章。顺便说一句，我发现 Medium 上的文章质量比较高，很多文章都 Google 到了 Medium 上。这里，我只想说，对于一个学习者来说，找到优质的信息源可以让你事半功倍。一方面，就像找到一本很好的武林秘籍一样，而不是被他人翻译过或消化过的，也不会有信息损失甚至有错误信息会让你走火入魔。另一方面，你需要的不只有知识和答案，更重要的是掌握学习的方法和技能。你要的是“渔”，而不是“鱼”。</p><h2 id="注重基础和原理"><a href="#注重基础和原理" class="headerlink" title="注重基础和原理"></a>注重基础和原理</h2><p>我在很多的场合都提到过，基础知识和原理性的东西是无比重要的。这些基础知识就好像地基一样，只要足够扎实，就要可以盖出很高很高的楼。正所谓“勿在浮沙筑高台”。我说过，很多人并不是学得不够快，而他们的基础真的不行。基础不行，会影响你对事物的理解，甚至会让你不能理解为什么是这样。当你对事物的出现有不理解的东西时，通常来说，是因为你的基础知识没有跟上。在《程序员练级攻略 》一文中，我用了很大的篇幅给出了学习基础技术的路径。只要你努力学习那些基础知识，了解了其中的原理，就会发现这世界上的很多东西是大同的。举个例子，如果你学习过底层的 Socket 编程，了解多路复用和各种 I&#x2F;O 模型的话（select, poll, epoll, aio, windows completion port, libevent 等），那么，对于 Node.js、Java NIO、Nginx、C++ 的 ACE 框架等这些中间件或是编程框架，你就会发现，无论表现形式是什么样的，其底层原理都是一个样的。无论是 JVM 还是 Node，或者是 Python 解释器里干了什么，它都无法逾越底层操作系统 API 对“物理世界”的限制。而当你了解了这个底层物理世界以后，无论那些技术玩成什么花样，它们都无法超出你的掌控（这种感觉是很爽的）。再举一个例子，当学了足够多的语言，并有了丰富的实践后，你开始对编程语言的各种编程范式或是控制流有了原理上的了解，这时再学一门新语言的话，你会发现自己学得飞快。就像我 2010 年学习 Go 语言一样，除了那些每个语言都有的 if-else、 for&#x2F;while-loop、function 等东西以外，我重点在看的就是，出错处理是怎么玩的？内存管理是怎么玩的？数据封装和扩展怎么玩的？多态和泛型怎么搞的？运行时识别和反射机制是怎么玩的？并发编程怎样玩？……这些都是现代编程语言必需的东西，如果没有，那么这个语言的表达能力就很落后了。所以，当知道编程语言的本质和原理后，你学习一门新的语言是非常非常快的，而且可以直达其高级特性。最最关键的是，这些基础知识和原理性的东西和技术，都是经历过长时间的考验的，所以，这些基础技术也有很多人类历史上的智慧结晶，会给你很多启示和帮助。比如：TCP 协议的状态机，可以让你明白，如果你要设计一个异步通信协议，状态机是一件多么重要的事，还有 TCP 拥塞控制中的方式，让你知道，设计一个以响应时间来限流的中件间是什么样的。当学习算法和数据结构到一定程度的时候，你就会知道，算法不仅对于优化程序很重要，而且，会让你知道，该如何设计数据结构和算法来让程序变得更为健壮和优雅。有时候，学习就像拉弓蓄力一样，学习基础知识感觉很枯燥很不实用，工作上用不到，然而学习这些知识是为了未来可以学得更快。基础打牢，学什么都快，而学得快就会学得多，学得多，就会思考得多，对比得多，结果是学得更快……这种感觉，对于想速成的人来说，很难体会。这里我想再次强调一下，请一定要注重基础知识和原理上的学习！</p><h2 id="使用知识图"><a href="#使用知识图" class="headerlink" title="使用知识图"></a>使用知识图</h2><p>先讲一个故事，2000 年我从昆明到上海，开始沪飘的岁月。刚到上海，找不到好工作，只能大量地学习和看书，C&#x2F;C++&#x2F;Java，TCP&#x2F;IP，Windows 编程，Unix 编程，等等。结果呢，书太多了，根本看不过来。我想要更多地掌握知识，结果我发现以死记硬背的方式根本就是在使蛮力学习，我很难在很短的时间内学习很多的知识。于是我自己发明了一种叫“联想记忆法”的方法，比如，在学习 C++ 的时候，面对《C++ Primer》这种厚得不行的书，我就使用联想记忆法。我把 C++ 分成三部分。第一部分是 C++ 是用来解决 C 语言的问题的，那么 C 语言有什么问题呢？指针、宏、错误处理、数据拷贝…… C++ 用什么技术来解决这些问题呢？第二部分是 C++ 的面向对象特性：封装、继承、多态。封装，让我想到了构造函数、析构函数等。构造函数让我想到了初始化列表，想到了默认构造函数，想到了拷贝构造函数，想到了 new……多态，让我想到了虚函数，想到了 RTTI，RTTI 让我想到了 dynamic_cast 和 typeid 等。第三部分是 C++ 的泛型编程。我想到了 template，想到了操作符重载，想到了函数对象，想到 STL，想到数据容器，想到了 iterator，想到了通用算法，等等。于是，我通过“顺藤摸瓜”的方式，从知识树的主干开始做广度或是深度遍历，于是我就得到了一整棵的知识树。这种“顺藤摸瓜”的记忆方式让我记住了很多知识。最重要的是，当出现一些我不知道的知识点时，我就会往这棵知识树上挂，而这样一来，也使得我的学习更为系统和全面。这种画知识图的方式可以让你从一个技术最重要最主干的地方出发开始遍历所有的技术细节，也就是画地图的方式。如果你不想在知识的海洋中迷路，你需要有一份地图，所以，学习并不是为了要记忆那些知识点，而是为了要找到一个知识的地图，你在这个地图上能通过关键路径找到你想要的答案。</p><h1 id="深度、归纳和坚持实践"><a href="#深度、归纳和坚持实践" class="headerlink" title="深度、归纳和坚持实践"></a>深度、归纳和坚持实践</h1><h2 id="系统地学习"><a href="#系统地学习" class="headerlink" title="系统地学习"></a>系统地学习</h2><p>在学习某个技术的时候，我除了会用到上篇文章中提到的知识图，还会问自己很多个为什么。于是，我形成了一个更高层的知识脑图。下面我把这这个方法分享出来。当然学习一门技术时，Go 语言也好，Docker 也好，我都有一个学习模板。只有把这个学习模板中的内容都填实了，我才罢休。这个模板如下。</p><ol><li>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。</li><li>这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。</li><li>这个技术适用的场景。任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。</li><li>技术的组成部分和关键点。这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。</li><li>技术的底层原理和关键实现。任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。</li><li>已有的实现和它之间的对比。一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。</li></ol><p>基本上来说，如果你按照我上面所提的这 6 大点来学习一门技术，你一定会学习到技术的精髓，而且学习的高度在一开始就超过很多人了。如果你能这样坚持 2-3 年，我相信你一定会在某个领域成为炙手可热的佼佼者。</p><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>举一反三的道理人人都知道，所以，在这里我并不想讨论为什么要举一反三，而是想讨论如何才能有举一反三的能力。我认为，人与人最大的差别就是举一反三的能力。那些聪明的或者是有经验的人举一反三起来真是太令人惊叹。我觉得一个人的举一反三能力，可以分解成如下三种基本能力。联想能力。这种能力的锻炼需要你平时就在不停地思考同一个事物的不同的用法，或是联想与之有关的其他事物。对于软件开发和技术学习也一样。抽象能力。抽象能力是举一反三的基本技能。平时你解决问题的时候，如果你能对这个问题进行抽象，你就可以获得更多的表现形式。抽象能力需要找到解决问题的通用模型，比如数学就是对现实世界的一种抽象。只要我们能把现实世界的各种问题建立成数据模型（如，建立各种维度的向量），我们就可以用数学来求解，这也是机器学习的本质。自省能力。所谓自省能力就是自己找自己的难看。当你得到一个解的时候，要站在自己的对立面来找这个解的漏洞。有点像左右手互博。这种自己和自己辩论的能力又叫思辨能力。将自己分裂成正反方，左右方，甚至多方，站在不同的立场上来和自己辩论，从而做到不漏过一个 case，从而获得完整全面的问题分析能力。在这方面，我对自己的训练如下。对于一个场景，制造出各种不同的问题或难题。对于一个问题，努力寻找尽可能多的解，并比较这些解的优劣。对于一个解，努力寻找各种不同的测试案例，以图让其健壮。老实说，要获得这三种能力，除了你要很喜欢思考和找其它人来辩论或讨论以外，还要看你自己是否真的善于思考，是否有好奇心，是否喜欢打破沙锅问到底，是否喜欢关注细节，做事是否认真，是否严谨……这一系列的能力最终能构建出你强大的思考力，而这个思考力会直接转换成你的求知和学习能力。其实，我也是在不断地加强自己的这些能力。</p><h2 id="总结和归纳"><a href="#总结和归纳" class="headerlink" title="总结和归纳"></a>总结和归纳</h2><p>对自己的知识进行总结和归纳是提高学习能力的一个非常重要的手段。这是把一个复杂问题用简单的语言来描述的能力。就像我小时候上学时，老师让我们写文章的中心思想一样。这种总结和归纳能力会让你更好地掌握和使用知识。也就是说，我们把学到的东西用自己的语言和理解重新组织并表达出来，本质上是对信息进行消化和再加工的过程，这个过程可能会有信息损失，但也可能会有新信息加入，本质上是信息重构的过程。我们积累的知识越多，在知识间进行联系和区辨的能力就越强，对知识进行总结和归纳也就越轻松。而想要提高总结归纳的能力，首先要多阅读，多积累素材，扩大自己的知识面，多和别人讨论，多思辨，从而见多识广。不过，我们需要注意的是，如果只学了部分知识或者还没有学透，就开始对知识进行总结归纳，那么总结归纳出来的知识结构也只能是混乱和幼稚的。因此，学习的开始阶段，可以不急于总结归纳，不急于下判断，做结论，而应该保留部分知识的不确定性，保持对知识的开放状态。当对整个知识的理解更深入，自己站的位置更高以后，总结和归纳才会更有条理。总结归纳更多是在复习中对知识的回顾和重组，而不是一边学习一边就总结归纳。我们来总结一下做总结归纳的方法：把你看到和学习到的信息，归整好，排列好，关联好，总之把信息碎片给结构化掉，然后在结构化的信息中，找到规律，找到相通之处，找到共同之处，进行简化、归纳和总结，最终形成一种套路，一种模式，一种通用方法。要训练自己这方面的能力，你需要多看一些经典的方法论图书，看看别人是怎样总结和归纳知识的。你可以在一开始模仿并把自己的理解的知识给写出来，写博客会是一种很好的方式。另外一种更好的方式是讲一遍给别人听。总之，你需要把你总结归纳的知识公开出来，给别人看，接受别人的批评和反馈，这样你才能成长得更快。其实，我也在锻炼这样的能力。如果你在 Coolshell 上看过我写的《TCP 的那些事儿》，你就能知道我对《TCP&#x2F;IP 详解》这本这么厚的书以及一些日常工作经验的总结，我写成了两篇比较简单的博客。你需要像我一样扩大自己的知识面，然后学会写博客，就能慢慢地拥有这种能力了。这种将信息删减、精炼和归纳的方法，可以让你的学习能力得到快速的提升。当你这么做的时候，一方面是在锻炼你抓重点的能力，另一方面是在锻炼你化繁为简的能力。这两种能力都是让你高效学习的能力。最后，还想说一下，一般来说，拥有这样能力的人，都需要有在更高的维度上思考问题的能力。比如一些名人的金句，就是这种能力的体现。这种能力需要你非常深入的思考，需要你的阅历和经验，当然，和聪明人在一起也是提升这种能力的最有效的选择。</p><h2 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h2><p>所谓实践出真知，也就是学以致用，不然只是纸上谈兵，误国误民。只有实践过，你才能对学到的东西有更深的体会。就像我看 《Effective C++》和《More Effective C++》这两本书一样，一开始看的时候，我被作者的那种翻来覆去不断找到答案又否定自己的求知精神所折服。但是，作者的这种思维方式只有在我有了很多的实践和经验（错误）后，才能够真正地体会为什么是这样的。这两书不厚，但是，我看了十多年，书中的很多章节我都可以背出来，但是我想得到的不是这些知识，而是这种思维方式，这需要我去做很多的编程工作才能真正明白，才会有斯科特·迈耶斯（Scott Meyers）那样的思维方式，这才是最宝贵的。另外，实践出真知也就是英文中的 Eat your own dog food。吃自己的狗粮，你才能够有最真实的体会。那些大公司里的开发人员，写完代码，自己不测试，自己也不运维，我实在不知道他们怎么可能明白什么是好的设计，好的软件？不吃自己的狗粮，不养自己的孩子，他们就不会有痛苦，没有痛苦，就不会想改进，没有改进的诉求也就不会有学习的动力，没有学习，就不会进步，没有进步就只会开发很烂的软件……不断地恶性循环下去。实践是很累很痛苦的事，但只有痛苦才会让人反思，而反思则是学习和改变自己的动力。Grow up through the pain， 是非常有道理的。</p><h2 id="坚持不懈"><a href="#坚持不懈" class="headerlink" title="坚持不懈"></a>坚持不懈</h2><p>坚持不懈是一句正确的废话。前段时间，我在我的读者群中发起了一个名为 ARTS 的活动。每人每周写一个 ARTS：Algorithm 是一道算法题，Review 是读一篇英文文章，Technique&#x2F;Tips 是分享一个小技术，Share 是分享一个观点。我希望大家可以坚持一年，但是我也相信，能够坚持下来的人一定很少，绝大多数人都是虎头蛇尾的，但是我依然相信会有人坚持下来的。坚持是一件反人性的事，所以，它才难能可贵，也更有价值。我从 2003 年写 blog 到今天 15 年了，看书学习写代码，我都会一点一点的坚持。人不怕笨，怕的是懒，怕的是找到各种理由放弃。这里，我想鼓励一下你。现在很多国外的在线视频课都是 3-5 分钟一节课，一共 20 节课，总时长不到两个小时。然而，你会发现，能坚持看完的不到千分之一。当年 Leetcode 只有 151 道题的时候，一共有十几万人上来做题，但全部做完的只有十几个，万分之一。所以，只要你能坚持，就可以超过这个世界上绝大多数人。想一想，如果全中国有 100 万个程序员，只要你能坚持学习技术 2-3 年，你就可以超过至少 99 万人了（可能还更多）。当然，坚持也不是要苦苦地坚持，有循环有成就感的坚持才是真正可以持续的。所以，一方面你要把你的坚持形成成果晒出来，让别人来给你点赞，另一方面，你还要把坚持变成一种习惯，就像吃饭喝水一样，你感觉不到太多的成本付出。只有做到这两点，你才能够真正坚持。</p><h1 id="如何学习和阅读代码？"><a href="#如何学习和阅读代码？" class="headerlink" title="如何学习和阅读代码？"></a>如何学习和阅读代码？</h1><h2 id="读文档还是读代码"><a href="#读文档还是读代码" class="headerlink" title="读文档还是读代码"></a>读文档还是读代码</h2><p>杰夫·阿特伍德（Jeff Atwood）说过这么一句话：“Code Tells You How, Comments Tell You Why”。我把其扩展一下：代 码 &#x3D;&gt; What, How &amp; Details文档 &#x2F; 书 &#x3D;&gt; What, How &amp; Why可见，代码并不会告诉你 Why，看代码只能靠猜测或推导来估计 Why，是揣测，不准确，所以会有很多误解。而且，我们每个人都知道，Why 是能让人一通百通的东西，也是能让人醍醐灌顶的东西。但是，代码会告诉你细节，这是书和文档不能给你的。细节是魔鬼，细节决定成败。这样的话我们不但听过很多，我们做技术的也应该体会过很多。当然，我们也要承认，这些代码细节给人带来的快感毕竟不如知道 Why 后的快感大（至少对我是这样的）。书和文档是人对人说的话，代码是人对机器说的话（注：代码中有一部份逻辑是控制流程的逻辑，不是业务逻辑）。所以：如果你想知道人为什么要这么搞，那么应该去看书（像 Effective C++、Code Complete、Design Pattern、Thinking in Java 等），看文档。如果你要知道让机器干了什么？那你应该看代码！（就像 Linus 去看 zlib 的代码来找性能问题。）</p><p>因此，我认为都比较重要，关键看你的目的是什么了。如果你想了解一种思想，一种方法，一种原理，一种思路，一种经验，恐怕，读书和读文档会更有效率一些，因为其中会有作者的思路描述。像 Effective C++ 之类的书，里面有很多对不同用法和设计的推敲，TCP&#x2F;IP 详解里面也会有对 TCP 算法好坏的比较……这些思维方式能让你对技术的把握力更强，而光看代码很难达到这种级别。（现在你知道什么样的书是好书了吧 ;-)）如果你想了解的就是具体细节，比如某协程的实现，某个模块的性能，某个算法的实现，那么你还是要去读代码的，因为代码中会有更具体的处理细节（尤其是对于一些 edge case 或是代码技巧方面的内容）。</p><p>另外，看看下面的几个现象，你可以自己比较一下。很多时候，我们去读代码，那是因为没有文档，或是文档写得太差。很多时候，在 Google、Stack Overflow、GitHub 过后，你会发现，你掌握的知识就是一块一块的碎片，既不系统，也不结构化，更别说融会贯通了。你会觉得自己需要好好地读一本书，系统地掌握知识。你的这种感觉一定很强烈吧。很多时候，在读别人代码的时候，你会因为基础知识或是原理不懂，或是你在不知道为什么的情况下，要么完全读不懂代码，要么会误解代码。比如，如果你没有 C 语言和 TCP 原理方面的基础知识，就根本读不懂 Linux 下 TCP 的相关代码。我们因为误解代码用意而去修改代码造成的故障还少吗？很多时候，看到一个算法或是一个设计时，比如 Paxos，你是不是会想去看一下这个算法的实现代码是什么样的？思考一下如何才能实现得好？（但是如果你没看过 Paxos 的算法思想，我不认为你光看代码实现，就能收获 Paxos 的思想。）很多时候，当你写代码的时候，你能感觉得到自己写的代码有点别扭，怎么写都别扭，这个时候，你也会有想去看别人的代码是怎么实现的冲动。类似的情况还有很多，但从代码中收获大，还是从书中收获大，在不同的场景、不同的目的下，会有不同的答案。这里，谈一谈人的学习过程吧。从学习的过程中，我们来分析一下看代码和看书这两个活动。人对新事物的学习过程基本都是从“感性认识”到“理性认识”的。如果你是个新手，那应该多读代码，多动手写代码，因为你需要的是“感性认识”，这个时候“理性认识”你体会不到。一是因为，你没有切身的感受，即便告诉你 Why 你也体会不到。另一方面，这个阶段，你要的不是做漂亮，而是做出来。所以，在新手阶段，你会喜欢 GitHub 这样的东西。如果你是个老手，你有多年的“感性认识”了，那么你的成长需要更多的“理性认识”。因为这个阶段，一方面，你会不满足于做出来，你会想去做更牛更漂亮的东西；另一方面，你知道的越多，你的问题也越多，你迫切地需要知道 Why！这时，你需要大量地找牛人交流（读牛人的书，是一种特殊的人与人的交流），所以，这个阶段，你会喜欢读好的书和文章。然而，对于计算机行业这个技术创新能力超强、技术种类繁多的行业来说，我们每个人都既是新手，也是老手。</p><h2 id="如何阅读源代码"><a href="#如何阅读源代码" class="headerlink" title="如何阅读源代码"></a>如何阅读源代码</h2><p>很多人问过我，如何读代码。因为我在外企里工作的时间较长，所以，我经常接手一些国外团队写的代码。我发现，虽然老外写的代码比国人好一点儿（有 Code Review），但依然有文档缺失、代码注释不清、代码风格混乱等一些问题，这些都是阅读代码的障碍。这里，我把我的一些阅读源代码的经验分享给你，希望对你有用。首先，在阅读代码之前，我建议你需要有下面的这些前提再去阅读代码，这样你读起代码来会很顺畅。基础知识。相关的语言和基础技术的知识。软件功能。你先要知道这个软件完成的是什么样的功能，有哪些特性，哪些配置项。你先要读一遍用户手册，然后让软件跑起来，自己先用一下感受一下。相关文档。读一下相关的内部文档，Readme 也好，Release Notes 也好，Design 也好，Wiki 也好，这些文档可以让你明白整个软件的方方面面。如果你的软件没有文档，那么，你只能指望这个软件的原作者还在，而且他还乐于交流。代码的组织结构。也就是代码目录中每个目录是什么样的功能，每个文档是干什么的。如果你要读的程序是在某种标准的框架下组织的，比如：Java 的 Spring 框架，那么恭喜你，这些代码不难读了。</p><p>接下来，你要了解这个软件的代码是由哪些部分构成的，我在这里给你一个列表，供你参考。接口抽象定义。任何代码都会有很多接口或抽象定义，其描述了代码需要处理的数据结构或者业务实体，以及它们之间的关系，理清楚这些关系是非常重要的。模块粘合层。我们的代码有很多都是用来粘合代码的，比如中间件（middleware）、Promises 模式、回调（Callback）、代理委托、依赖注入等。这些代码模块间的粘合技术是非常重要的，因为它们会把本来平铺直述的代码给分裂开来，让你不容易看明白它们的关系。业务流程。这是代码运行的过程。一开始，我们不要进入细节，但需要在高层搞清楚整个业务的流程是什么样的，在这个流程中，数据是怎么被传递和处理的。一般来说，我们需要画程序流程图或者时序处理图。具体实现。了解上述的三个方面的内容，相信你对整个代码的框架和逻辑已经有了总体认识。这个时候，你就可以深入细节，开始阅读具体实现的代码了。对于代码的具体实现，一般来说，你需要知道下面一些事实，这样有助于你在阅读代码时找到重点。代码逻辑。代码有两种逻辑，一种是业务逻辑，这种逻辑是真正的业务处理逻辑；另一种是控制逻辑，这种逻辑只是用控制程序流转的，不是业务逻辑。比如：flag 之类的控制变量，多线程处理的代码，异步控制的代码，远程通讯的代码，对象序列化反序列化的代码等。这两种逻辑你要分开，很多代码之所以混乱就是把这两种逻辑混在一起了。出错处理。根据二八原则，20% 的代码是正常的逻辑，80% 的代码是在处理各种错误，所以，你在读代码的时候，完全可以把处理错误的代码全部删除掉，这样就会留下比较干净和简单的正常逻辑的代码。排除干扰因素，可以更高效地读代码。数据处理。只要你认真观察，就会发现，我们好多代码就是在那里倒腾数据。比如 DAO、DTO，比如 JSON、XML，这些代码冗长无聊，不是主要逻辑，可以不理。重要的算法。一般来说，我们的代码里会有很多重要的算法，我说的并不一定是什么排序或是搜索算法，可能会是一些其它的核心算法，比如一些索引表的算法，全局唯一 ID 的算法、信息推荐的算法、统计算法、通读算法（如 Gossip）等。这些比较核心的算法可能会非常难读，但它们往往是最有技术含量的部分。底层交互。有一些代码是和底层系统的交互，一般来说是和操作系统或是 JVM 的交互。因此，读这些代码通常需要一定的底层技术知识，不然，很难读懂。运行时调试。很多时候，代码只有运行起来了，才能知道具体发生了什么事，所以，我们让代码运行进来，然后用日志也好，debug 设置断点跟踪也好。实际看一下代码的运行过程，是了解代码的一种很好的方式。总结一下，阅读代码的方法如下：一般采用自顶向下，从总体到细节的“剥洋葱皮”的读法。画图是必要的，程序流程图，调用时序图，模块组织图……代码逻辑归一下类，排除杂音，主要逻辑才会更清楚。debug 跟踪一下代码是了解代码在执行中发生了什么的最好方式。对了，阅读代码你需要一个很好的 IDE。我记得以前读 C 和 C++ 代码时，有一个叫 source insight 的工具就大大提高了我的代码阅读效率。说白了就是可以查看代码间相互的调用 reference 的工具，这方面 Visual Studio 做得是非常好的。</p><h1 id="如何面对枯燥和大量的知识？"><a href="#如何面对枯燥和大量的知识？" class="headerlink" title="如何面对枯燥和大量的知识？"></a>如何面对枯燥和大量的知识？</h1><h2 id="如何面对枯燥的知识"><a href="#如何面对枯燥的知识" class="headerlink" title="如何面对枯燥的知识"></a>如何面对枯燥的知识</h2><p>首先，我们要知道，为什么会有枯燥的知识？一般来说，枯燥的东西通常是你不感兴趣的东西，而你不感兴趣的东西，可能是你并不知道有什么用的东西。这样的知识通常是比较底层或是抽象度比较高的知识，比如：线性代数，或者一些操作系统内部的原理……越理论的东西就越让人觉得枯燥。我还记得，当初上大学学习《计算机网络》时，直接学习那个七层协议，以及那些报文，让我感觉枯燥得不行。那个时候，完全不知道这些东西有什么用，因为我连网络是什么都没有见过。直到有一天，我在老师的公司里看到了网卡、网线和 Hub，然后了解了 Windows NT 的域和 IP 地址，然后用 Power Builder 连上了 SQL Server，用 SQL 写入并读取了数据，我才真正明白网络原来有这么好玩。我开始学习《TCP&#x2F;IP 详解》，又感到一阵枯燥。然后，有一个同事给我递来了《Unix 网络编程》，我照着其中的例子，写了一个聊天服务器，前端用 Delphi 写了一个 QQ 的样子，那种兴奋劲就别提了。再后来，因为要处理网络问题，调优网络性能，我才发现，以前随便学了点的《TCP&#x2F;IP 详解》对我在排查网络问题上有很大的帮助。这个时候，我才认真地看了这本书，也正是这个时候，才算是真正读进去了。后来，我让我团队的一个人学《TCP&#x2F;IP 详解》这本书，他发现有点难啃就买了一本《图解 TCP&#x2F;IP》。我找来一看，发现这种图文并茂的书真是增加了很不错的阅读体验，一下子就觉得不是很枯燥了。这让我回想起来那本《从一到无穷大》的相对论科普书，简单、一点也不枯燥。然而，能把这么复杂的问题用这么简单的语言讲清楚的一定是这个领域的大牛了。我列举我的这个学习过程，就是想说，如果你发现有些知识太过于枯燥，那么可以通过下面的方法解决。这个知识对于你来说太高级了，你可能不知道能用在什么地方。人的认知是从感性认识向理性认识转化的，所以，你可能要先去找一下应用场景，学点更实用的，再回来学理论。学习需要有反馈，有成就感，带着相关问题去学习会更好。当然，找到牛人来给你讲解，也是一个很不错的手段。</p><h2 id="如何面对大量的知识"><a href="#如何面对大量的知识" class="headerlink" title="如何面对大量的知识"></a>如何面对大量的知识</h2><p>看过《程序员练级攻略》的朋友们，一定会有这样的疑问，东西太多了，怎么学。我给你的建议是，一点一点学，一口一口吃。你可以使用我前面说过的那些方法，注重基础，画知识图，多问为什么，多动手，然后坚持住，哪怕你每周就学一个知识点，你一年也可以学到 50 个知识点。只要你在进步，总有一天可以把这些知识学到手的。当然，你的目的不是学完这些知识，因为学无止境，你永远也学不完，所以你在学习时，一定不要学在表面上，一定要学到本质，学到原理上，那些东西是不容易变的，也是经得住时间考验的。把学习当成投资，这是这个世界上回报最好的投资。带着问题去学习，带着要解决的东西去学习，带着挑战去学习，于是每当你解决了一个问题，做了一个功能，完成了一个挑战，你就会感到兴奋和有成就感。这样，你也就找到了源源不断的学习驱动力。把你学习的心得、过程、笔记、代码分享出来，找到和你一同学习的人，因为一个人长跑很辛苦，有人同行就会好很多，就算没有人同行，你的读者，你的观众也会为你鼓掌加油，这些也是让你持续前行的动力。人的一生是要永远学习的。加油！</p><h2 id="认真阅读文档"><a href="#认真阅读文档" class="headerlink" title="认真阅读文档"></a>认真阅读文档</h2><p>我发现很多技术问题都是出在技术人员不认真读技术手册上，我自己也一样。在我的成长生涯中，我发现很多答案其实都在文档中，而我却没有仔细地去读一下。可能是，我们都不想投入太多的时间吧。在这里，我想说，用户手册（User Manual）一定要好好地读一读，很多很多提示都在里面了，这是让你可以少掉很多坑的法宝。比如：Unix 和 Linux 的 man，Docker 和 Kubernetes 的官方文档，Git 的操作文档……你的很多很多问题的答案都在这些文档中。认真阅读用户手册不但可以让你少掉很多坑，同时，还能让你学习到很多。</p><h2 id="其它几个实用的技巧"><a href="#其它几个实用的技巧" class="headerlink" title="其它几个实用的技巧"></a>其它几个实用的技巧</h2><p>用不同的方式来学习同一个东西。比如：通过看书，听课，创建脑图，写博客，讲课，解决实际问题，等等。不要被打断。被打断简直就是学习的天敌，所以，你在学习的时候，最好把手机设置成勿扰模式放在一边，然后把电脑上的所有通知也关掉，最好到一个别人找不到你的地方。总结压缩信息。当你获得太多的信息时，你需要有一个“压缩算法”。我常用的压缩算法是只关心关键点，所以，你需要使用表格、图示、笔记或者脑图来帮助你压缩信息。把未知关联到已知。把你新学的知识点关联到已知的事物上来。比如，你在学习 Go 语言，你就把一些知识关联到自己已经学过的语言上比如 C 和 Java。通过类比，你会学得更扎实，也会思考得更多。用教的方式来学习。你想想，如果你过几天要在公开场合对很多人讲一个技术，那么这个压力会让你学得更好。因为要教给别人，所以，这么高的标准需要你不但要把自己已掌握的东西学好，还要把周边的也一并学了，才可能做到百问不倒。你才敢去教别人，不是么？（试试教 6 岁的孩子编程，如果你掌握了这种技能，那么你一定是把知识吃得非常透彻了。）学以致用。把学到的东西用起来，没有什么比用起来能让你的知识更巩固的了。在实践中，你才会有更为真实的体会，你才会遇到非常细节和非常具体的问题，这些都会让你重新思考，或深化学习。不要记忆。聪明的人不会记忆知识的，他们会找方法，那些可以推导出知识或答案的方法。这也是为什么外国人特别喜欢方法论。多犯错误。犯错会让你学得到更多，通过错误总结教训，你会比没有犯过错的人体会得更深。但是千万不要犯低级错误，也不要同一个错误犯两次。</p><p>——陈皓（Amazon 研发经理，阿里巴巴 P9）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《N 维世界》</title>
      <link href="/2023/06/17/N%20%E7%BB%B4%E4%B8%96%E7%95%8C/"/>
      <url>/2023/06/17/N%20%E7%BB%B4%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>我们普遍认为这个世界是三维的，一维是点线，二维是平面，三维是空间，有人说四维的因为加了时间这个维度。其实你还可以给这个世界加上其他维度，比如植物的种类，空气的湿度，氧气的含量……而人们普遍只会认为这个世界就是三维的，甚至万事万物都是线性的，尤其是人的想法。</p><p>这半年在国内大语言模型被炒的火热，对机器学习和自然语言处理有所了解就会知道，其核心的原理就是通过对词法分析得到不同的实体，然后转化为词袋向量，将这些向量放入预先通过海量的数据训练好的基于概率统计的数学模型中，模型会通过自注意力机制，联系前文算出一个概率比较大的组合，也就是回答，之所以问一些比较复杂的问题能组合的比较好，是因为它训练后能联系到的维度很多，ChatGPT 3.5 的参数是 1750 亿，ChatGPT 4 的参数达到万亿，很大程度上是因为参数数量的增加模型的“理解力”也随之增加了，其实是词向量的组合能联系到的数据更多了，相对而言统计的数据也更加准确，但是一旦输入的数据过多，模型就开始胡说八道了，因为词向量的组合过多，能对应到的组合是比较准确的可能性下降。大概人的想法也是类似，当人认知的模型不够强大的时候，面对复杂的问题也总是手足无措。但是我始终认为所谓的人工智能本质上还是像和机械是一样的，机械永远也不会产生人的情感。人工智能会通过概率统计计算出最大的可能，但是这个世界上有很多数学问题本来就是不可解的，而且这个世界上的问题也并不是所有都能够被数学建模。</p><p>我以前常常说自己是一个悲观的乐观主义者，因为我知道这个世界总是朝着熵增的方向发展，人生也不过匆匆七八十年，个人在面对这个复杂的世界的时候是那么渺小，所以总是能够被一些很小的事情高兴很长时间，比如骑车的时候刚好是绿灯，本科的时候在实验室王老师说我很容易被满足，其实后来想想并不是什么坏事情，人的性格没有好坏之分，只有特点。希腊在很多欧洲人心中是文明之母，而希腊的戏剧也总是以悲剧为主，其实后来了解到，悲观文学其实真正的名字叫做严肃文学，为什么严肃剧总是以悲剧为结尾呢？首先，人生是短暂的，这本身就是个悲剧。其次，人的力量是有限的，很多的事情自己做不到。最后，命运是无常的。古希腊悲剧是献给神的，他们想要通过那些故事，告诉神人类对命运的理解。看到这里或许会感到一些情绪低落，其实虽然知道道路的尽头是无尽的黑夜，但我们依然可以选择是欢笑着走完这段路程还是愁眉苦脸的走完。我记得上个月在读美国著名投资人的著作《纳瓦尔宝典》中就有写到一段话让我印象很深刻：</p><blockquote><p>其实，我们没有什么遗产，没有什么可以留下的，也没有什么会永垂不朽。我们都会离开这个世界，我们的孩子也会离开这个世界；我们的成就终将化为尘土，人类文明也会化为尘土；我们的地球将变成尘埃，太阳系也会化作尘埃。从宏观角度看，宇宙已经存在了 100 亿年，并将继续存在 100 亿年。<br>相对于宇宙，你就像一只在夜空中闪烁的萤火虫，你的生命转瞬即逝。如果能彻底认识到你所做的一切不过是徒劳，你就能获得巨大的幸福感和平和感，因为你会意识到，生命不过是一场游戏。但生命是一场有趣的游戏。在这场游戏中，唯一重要的事情就是，随着生命的展开，你要不断地体验现实。既然如此，你为什么不以最积极的方式去诠释自己经历的一切呢？<br>人固有一死，死后万事皆空。所以，好好享受生命吧。对社会做一些积极的贡献。向世界主动释放和传播爱。给他人带来快乐和幸福。让生活多一些笑声。珍视眼前的每个瞬间。承担使命，尽职尽责，不枉此生。</p></blockquote><p>但是我慢慢发现如果我以这种悲观的基调做事情，虽然做不成也不会很伤心，但也会错过很多事情，后来我调整为保守的乐观主义，所谓的保守其实是以乐观为基调渐进式的进行改进，就算没做成我也相信不过是暂时而已，如果我努力过却最后结果不如人意，我也相信上天自有更好的安排。</p><p>我在读法国社会科学高等学院的教学讲义《与哲学家谈快乐》其中介绍到庄子的智慧的时候，有一段给我印象也很深刻：</p><blockquote><p>庄子曾经用渡河的例子来阐释自己的理论。他说，中国江海水势浩大，波涛汹涌，就好比我们的生命之河。人们在渡河时大多会竭尽全力、逆流而上，但结果却是徒劳无功，最终筋疲力尽溺水而亡。庄子认为，水流越是湍急，就越不应该与之抗衡。心中向往着对岸，身体随波浪起伏，顺水流漂荡，我们就能成功渡河，安全且轻松地到达彼岸。道家思想就是一种讲求时机的哲学。它所主张的“无为” 并不是什么都不做，而是顺势而为。始终牢记自已的目标和本心，拒绝急功近利、不择手段。如果我们的目标与人生走向背道而驰，不妨先顺应这一趋势。目标或者可以晚些达成，或者在此期间我们又有了新的方向，那么放弃也是个不错的选择。</p></blockquote><p>放眼人类的有文字记录的五千年的历史，我常常和父母说二十年前和现在不一样，四十年前又和二十年不一样，没有什么是稳定不变的。而时代的一粒尘，压在个人的身上往往却是一座山，能靠的住的就是自己的努力。</p><p>有时候在努力过后又确实发现时无能为力，我想就需要调整一下心态，我想引用吴军老师在《软能力》中写到一段：</p><blockquote><p>我们每个人都快乐过，悲伤过，爱过，恨过。著名有学家莱布尼茨说，今天发生的每一件事，都有过去合理的原因。同样，我们往前看，所有这些已经发生的事情，未来都会产生个合理的结果。这个过程，塑造了我们每一个人。在生活中，从来都是道理容易理解，做起来却千难万难。有时候我们需要的不是一个道理，而是一种心态。学会时刻保持与自己和解的心态，去面对生活中时常发生的烦心事。当然，与身己和解不是对自己放任自流。恰怡相反，只有与自己和解，我们才能在挫折和灾难发生后再次站起来，继线努力前行。</p></blockquote><p>中国的高考用一套试卷几个简单的维度把学生分到不同的学校，虽然国家倡导取消所谓的985，211，二本，三本这种标签，但是社会上还是会通过这些东西简单的评判一个人，通过学历划分成三六九等，通过家境工作划分阶级，我觉得只用这些去评判一个人无疑还是和封建社会甚至动物无异。人类的社会的发展从来都是那些被歌颂的品质推动着整个文明的前进，教育的本质是要成为自由人，而不是三六九等的奴隶社会。而所谓的自由对应整个环境我觉得是一种人文主义，我比较欣赏哥斯达黎加，丹麦国民普遍认同那种幸福来自生活的意义，更在乎的生活的本身，而不是只是各种权钱名利。最近看到一个去年大二转学去美国读书的计算机系学弟发出的感慨：</p><img src="/img/1701000547885.jpg" alt="1701000547885" style="zoom:40%;" /><p>其实他的观点是有失偏颇的，但是从某种意义上来说是不是我们也应该去思考，在追求经济高速增长的过程中我们是不是也忽略了什么东西？有时候我在打羽毛球的时候会和学弟说，你不要看有些人看起来赢了球，实际上他的动作非常的难看，有的在自己水平一般的情况下刻意的把球拍的磅数拉到30磅，实现局部的优势，比如球速，但是他的上限是很低的，你不要急，输了球也不要气馁耐心的改进自己的姿势，等你过几年就能打的非常的好了，你在这个过程会得到升华。如果有机会和非常优秀的人交手，他们无论做什么对自己的要求都是很高的包括羽毛球，会欣赏你对自己的追求，这个锲机也会让你遇到很多志同道合的人。慢即是快，不要只是盯着眼前的局部优势。我认为整个中国社会将会慢慢迎来一场比较深度的改革，这是进入发达国家的必进之路，我相信会越来越好。我最后，希望在这个N维世界认识到世界的复杂性的同时，能幸福，祝好！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《当像鸟飞往你的山》</title>
      <link href="/2023/02/21/%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/"/>
      <url>/2023/02/21/%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<p>虽然我大学时代已经结束了，不过又到了另一个大学里去读了研究生，学校虽然是211工程高校，但是在江西南昌，和一线城市里211的眼界还是比不了的，刚开学的时候有几个在老乡群里的大一学弟时常找我聊天，听他们的迷茫，不知所措。看到钟老师的总结，感触很深，很多事情只有经历过才会打心底里的认同，我想借这个机会重新梳理一下一个学生在步入社会之前需要成长起来的能力，也是我对接下来研究生几年的计划的一个思考。我本科的时候在一个普通的二本上的学，高考报专业基本上就是靠蒙，普遍就是老师上课听不懂，没有保研名额，大家对成绩都不怎么上心，学校在一个经济全省倒数第一的三线城市黄山市，风景非常美丽，而眼界确实落后了许多，在当地是几乎没有实习机会的，绝大数人直到大三还没有这个意识，送外卖打零工的同学还真不少，更多的是在宿舍打游戏，学习毫无目标的东戳戳西戳戳，整天琢磨着怎么追到喜欢的女同学却又犹犹豫豫四年过去还是孑然一身，然后集体考研，二战，最后碰运气去找工作。</p><p>大学的生活相对而言还是很自由的，课程的安排相对于高中也不算很多，基本上是上半天课放半天假的状态，老师平时也没什么要求最好考试靠着划的重点也能通过，一些同学利用这个时间去打游戏，一些同学利用这个时间去提高自己，参加比赛，实习，四年过后明明刚进来的时候大家都差不多，毕业后的走向却那么迥然不同。吴军老师说不要想着能考上一个好大学就能超过别人几代人的努力，但是成功的道路上也并不拥挤，大概每一年都会掉队20%的人，你只要能坚持五年，就能比现在大多数的人强了。当我意识到自己可能并不是适合本专业更适合学计算机的时候，因为已经错过了学校转专业的考试，本科的时候并没有能转去计算机专业，大二的时候听计算机的同学说一个老师的实验室学习小组在招新，负责实验室管理的人是我的C语言老师，记得当时我 《C语言程序设计》考得还挺高，95 分，得到老师的同意后就满怀希望的去了，由于招新群里都是计算机专业的同学，我没在里面就去晚了已经没有可以用的电脑了，就临时拿了一台十几年前1G运行内存的联想电脑装了Chorme浏览器和编辑器EditPlus，实验室有很多听起来很奇怪刻板的规定，比如不准恋爱，学Java只能看《Java编程思想》，不准用IDE写代码，要会各种命令行，不准用Spring等各种框架，不准用自己的电脑，每天必须八点来十点二十走，写了流量分析软件监测我们在干什么，周末和法定假期就开组会布置一些任务督促学习，很多不懂不会没听说过，苦不堪言，两年过去，八个月疫情回来最后三十多人只剩两个人。听王老师说以前在中科大蓝鹰实验室带学生，经常听他表扬科大的学生如何怎样，一直也以科大的标准要求他的学生。它自己以身作则，已经年近六十，每天晚上没事的话还是八九点走，周末放假也在实验室。疫情回来以后明显感觉自己学习跟不上了，网络上漫天盖地的贩卖焦虑，让我突然想考个研究生缓冲深造一下。就这样一年半的备考时间过去，经过初试复试，勉强上岸。考研真的挺不容易的，有人比喻是关着灯在房间里洗衣服，直到最后才知道结果，这种紧迫的不确定感和孤独感一直伴随着。如果说在实验室学到最多的是什么，我想是王老师身上那股的精神，让我看到了世界上厉害的人都是很努力的人，还有就是在实验室每天晚上写日记自己学会了做一些思考。如果说考研给我最大收获是什么，我想是做成一件很困难事情成功的经历和信心，选择比努力重要。因为是综合类大学，还能上一些有意思的课程和事物，比如国学课听教授讲不一样的《蒹葭》，听艺术学院的书记给我们上思政课讲故事，植物园，各种动植物标本，厨艺大赛，街舞比赛，陶艺等等，也总是能遇到各种各样专业背景的同学，比如文学，旅游，园林等等。相对于理工类大学确实多样化丰富许多，周围环境的人和看到的事物又能反过来影响一个人，自己看到的不止局限于自己的专业领域的一亩三分地。</p><p>上了大学以后，没有了家里的管束，每个月家里会发一些生活费，不多但够我一个人生活了。也没怎么挨过社会的毒打，大四的时候被学校强制安排实习去了浙江的一家汽车配件制造工厂实习，在一线工作很深刻的学会了很多事情，社会的分工合作，人情冷暖，生活的无奈。因为我高中是在一个镇上的高中读的，能考上大学就挺了不起了，毕竟一个学校文化课能考上的学生一个巴掌就能数的过来。自己的自主性还算比较高，但是基础太差，一直不得法，小学初中在很一般的学校班级也时常倒数，高中复读一年考了个普通的公办二本，好在一直不放弃坚持持续的慢慢的优化自己，小时候的爱好就是喜欢去超市一角的书架看各种有意思的书籍，好奇心很强，其中《鲁宾逊漂流记》对我的影响非常的深刻，在如此恶劣的条件下他依然不放弃在一座孤岛上存活了下来生活的井井有条。到了大学以后，自由的时间多了起来，我大一的时候经常去学校图书馆看各种类型的书，体育，摄影，效率，经济，以前只能在镇上很小的新华书店看到畅销书，比如大冰等各种作者写的鸡汤文，但是真正很深刻有用的书籍在大众中是不那么畅销的。也算打开了第一个眼界，原来在书里还能看到学到这些东西。</p><p>告别了中学的保姆式学习后，终于到了大学这个自由的地方，如何学习这个想当然的问题又被浮出水面，例常的学校课程，已经远远不够这个不断发展的社会的需要，我觉得在学校培养出自己自学能力是最重要的，包括专业能力，人际交往能力等等，凡是技能，就能通过学习获得，当然在学习之前，要想清楚自己到底是否真的需要费时间在这方面，它能帮助我在哪方面能获得切实的改善，而不是看别人都去做了自己也要去做。然后就是确定学习的路径，找业界最牛人的抄作业，最快的上手自己学习的东西，按照需求看是否需要这方面花大量的时间去精进成为专家。和父母分别了以后，我们也要慢慢学会独立的生活能力，后有的同学到了大学以后上午没有课程就睡到中午起来吃饭，整天窝在宿舍打游戏活在虚拟的世界中。在大学我们可以找到自己群体，比如一群爱打羽毛球的人，可以收获很多快乐和友谊，积极的参加社团的活动，有了共同的话题就能找到产生共振的人，收获友谊甚至是爱情，学会跟人沟通相处，如何寻求帮助。放假了可以试着找一份社会上的实习，我觉得刚开始找到什么工作并不是很重要，哪怕是工厂一线的工人，接触一下社会走出学校的象牙塔，看看社会上人与人之间是怎么相处的，学会怎么赚钱怎么花钱，在学校也好去社会上也好，积攒生活经验，比如怎么定车票，在车站不要迷路，在哪里住不被坑，怎么叠衣服收纳物品不要摆的到处都是等等。中学的时候看课外书可能是一个不务正业的事情，但是实际上高考之外还有更大的世界，我们要多看一些牛人写的书籍，比如吴军，吸收他们的知识，智慧和技能，帮助自己成长。平时也可以养成看报纸的习惯，比如人民日报电子版，是免费的，可以看看政策和社会在发生怎样的变化，看相关的杂志可以获得更详细的细节。培养自己健全的世界观，知道社会是怎么运转的，明白生产力和生产的关系，知道公司是怎么运转的，明白钱从哪里来，知道什么是真善美，明白什么是好坏，这都是我们需要培养的核心能力。</p><p>大学后，脱离了中学谈爱色变的环境，来到自由的环境下本能的想接触异性，却又会遇到这样那样的困难，刚开始让人手足无措。坐在实验室里，用余光四处打量各位专注在电脑屏幕前一声不吭的研究僧，不禁感慨。之前对爱情的认识大多是来自小说电视所见所感，父母那一辈能看到亲情几乎看不到爱情的模样，现实中爱情和自己认为的差得太多，听了几位老师对爱情的见解我是同意爱情的价值的，爱情不单单能带来快感，满足人的基本的需求，它还能锻炼我们能力，是每个人的必修课。有句格言说修身齐家立业，我也认为在齐家之前还是要修身的，从外貌，人际交往，自我修养，到专业能力，自己有能力有担当的时候，爱情才更加稳固。我第一次恋爱是在大一的时候，因为性格不合分开了。大四的时候对一个女生有过好感，而这半场邂逅的记忆永远的停留在了两场大雨之中，她的出现让我成长的很快，的确爱情是男孩长大的必经之路。读研以后，整天都宅在实验室，看到几位老师对爱情的分析，不禁被触动，爱情是投资回报率非常高的事情，是需要不断地学习努力才能经营好的。</p><p>最后我想以我在2022年夏日的一天晚上在苏州夜跑时停留在大桥边趴着栏杆看着一往无前的江水吹着晚风有感而发的文字作为结尾，我把这段文字发在了网易云的一条动态的评论中，然后很意外的火了（300+的点赞，很多人鼓励的评论和私信真的很让人感动！）：</p><blockquote><p>我没有考上中科大，我也没有……而真的走到现在，又是另一种感受，一切都是最好的安排。这几天奶奶胆结石开刀，爸一直说奶奶八十多岁还要遭这个罪，离得远没能照顾到奶奶想回去了。人的生活不止诗和远方，生老病死，油米酱盐，亲友子女，当我没有感到生活的残酷的时候终究还是父母扛下了所有。 每天跑步回来的时候最快乐的是妈把冰镇好的水果和空调提前准备好。上学的时代真的难得可贵，大家没那么多坏心思，不用顾虑太多，一门心思放在提升自己就好，看看书，趴在电脑前做实验，去操场湖边跑步，去羽毛球馆打球，去游泳馆游泳。 知乎抖音小红书等喜欢把本不属于我的东西给我看，让我感觉自己也可以，不断提高了自己的心理的阈值，获得了很多的焦虑情绪，永远在比较在欲求不满，这不是好事情，所以我现在只把他们作为看八卦娱乐，工具参考使用了，不能信以为真，多和行业内的人交流才能获得一手有价值的信息。 爱是一门艺术，值得用心对待，去学习去经营。 从小到大，我都不算是一个很聪明的学生，小学换了五个学校一直稳居倒数前十，初中由于之前基础很差很努力才勉强考上镇上高中“实验班”，高中也是很努力才考上一个普通的公办本科，主要是从小就比较厌恶中国的应试教育，已经基本脱离了教育的本质了只是为了考试而学习。选了一个专业没蒙对，大二有幸遇到中国科学技术大学的老师没有瞧不起我愿意带我学计算机，不厌其烦的从最简单的知识到最简单的学习方法一一解答，他说我作为一个非计算机的学生能够有这样的态度很了不起，希望继续保持下去。表哥只用了三个月就考上西安电子科技大学，还考得很高，毕业去了华为，我用了一年多的时间，真的是拼尽全力才算勉强考上一个普通的211，我很喜欢和他聊天，只要一放假听到他回来了我就会跑过去蹭话，刚开始很自卑，表哥是个很和气的人，在一些很关键的问题上却能说的很透彻。这一路上感谢他的鼓励。大学最好的朋友是义鑫学长和文，真的算是知心朋友了，义鑫学长现在在合肥工作，大我两级，大学的时候我有什么事情或者他有什么事情都会找彼此吃饭聊天，相互倾听，我说到伤心处义鑫学长眼睛会泛红流泪，我很欣赏他的才华，会因为看到他发表在杂志上的诗篇动情的辗转难眠。义鑫学长在我大一的时候喜欢找我在操场散步分享他很多没有写出来的创意，一直到深夜，分享在学校或者附近新发现的美食地点一起过去，送给我的一篇发表在《湖北文学》上的散文诗《无非是静谧》，我选了个木质相框保护起来一直摆在桌子旁。文在上海做GIS相关的编程开发工作，在实验室一直是同桌，一起学习完成老师布置的任务，一起吃饭，每天深夜十点一起回去，大二暑假一起去了趟杭州找实习变成了旅游，玩的很快乐。决定离开的时候，我看到他晚上在阳台一个人在哭，我看到后递给他一张纸帕，他说风大有沙子，我知道，那晚其实没有风。他走后，我一个人在阳台也哭了很久，大概是觉得舍不得他们，大概是面对以后的不确定性的不知所措，大概是此时对所有的一路坎坷的释放，他的眼泪成为压断我情绪的最后一根稻草，休整过后继续前进。</p></blockquote><p>总结来看，长时间的积累真的可以带来很大的改变，只要想变好不放弃，人生是一场马拉松，我很喜欢曾国藩这个人，他建立了一个普通人取得俗世上的成功的模型，我一直在向他学习。同时，无论现在怎么样，谁也无法剥夺你快乐的权利，去感受大自然的奇妙，走进光亮的人群让生活带来更多的欢笑，去不断的提升自己，去追求自己的理想，我一直觉得人生是一场旅程，好的坏的都是礼物，重在过程中的体验。慢慢来，五年，十年，二十年，和时间做朋友，时间会告诉你答案。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
